import os
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message
import youtube_dl
from pytgcalls import PyTgCalls, idle
from pytgcalls.types import AudioPiped, AudioVideoPiped

# ูู ุจุชุบููุฑ ูุฐู ุงูููู ุจูุนูููุงุช ุงูุจูุช ุงูุฎุงุตุฉ ุจู
API_ID = 21100923
API_HASH = "32ad1f2eb62a60301e7bbcdf91c43641"
BOT_TOKEN = "7881688759:AAFNZwzFQhfRVEk1ceJ7E21JjbJH6Pmo7HM"

DOWNLOAD_PATH = "downloads/"
LOCAL_MUSIC_PATH = "local_music/"

if not os.path.exists(DOWNLOAD_PATH):
    os.makedirs(DOWNLOAD_PATH)
if not os.path.exists(LOCAL_MUSIC_PATH):
    os.makedirs(LOCAL_MUSIC_PATH)
    print(f"ููุงุญุธุฉ: ุงููุฌูุฏ '{LOCAL_MUSIC_PATH}' ุบูุฑ ููุฌูุฏ. ูุฑุฌู ูุถุน ูููุงุช ุงูููุณููู ููู.")

app = Client(
    "music_player_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# ุชููุฆุฉ PyTgCalls
pytgcalls = PyTgCalls(app)

# ูุงููุณ ูุชุฎุฒูู ููุงุฆู ุงูุงูุชุธุงุฑ
queue = {}
# ูุงููุณ ูุชุฎุฒูู ุญุงูุฉ ุงูุชุดุบูู ุงูุญุงููุฉ
active_chats = {} # ูุชุชุจุน ุงูุฏุฑุฏุดุงุช ุงูุตูุชูุฉ ุงููุดุทุฉ

async def play_next_in_queue(chat_id: int):
    if queue.get(chat_id) and queue[chat_id]:
        audio_info = queue[chat_id].pop(0)
        file_path = audio_info["file_path"]
        title = audio_info["title"]

        try:
            # ุงูุงูุถูุงู ุฅูู ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ ุฅุฐุง ูู ููู ุงูุจูุช ูููุง
            if chat_id not in active_chats or not pytgcalls.get_active_call(chat_id):
                await pytgcalls.join_group_call(
                    chat_id,
                    AudioPiped(file_path),
                    # ููููู ุฅุถุงูุฉ VideoPiped ุฅุฐุง ููุช ุชุฑูุฏ ุฏุนู ุงูููุฏูู ุฃูุถูุง
                )
                await app.send_message(chat_id, f"๐ต ุงูุถููุช ุฅูู ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ ูุฌุงุฑู ุชุดุบูู: **{title}**")
            else:
                await pytgcalls.change_stream(
                    chat_id,
                    AudioPiped(file_path)
                )
                await app.send_message(chat_id, f"๐ต ุฌุงุฑู ุชุดุบูู ุงูุฃุบููุฉ ุงูุชุงููุฉ: **{title}**")

            active_chats[chat_id] = {
                "playing": title,
                "file_path": file_path # ูุญุชูุธ ุจุงููุณุงุฑ ูุญุฐูู ูุงุญููุง ุฅุฐุง ูุงู ูุคูุชูุง
            }

            # ูุง ููุฌุฏ 'ุชู ุงูุชูุงุก ูุงุฆูุฉ ุงูุชุดุบูู' ููุง ูุจุงุดุฑุฉุ ุจู ุนูุฏ ุงูุชูุงุก ูุงุฆูุฉ ุงูุงูุชุธุงุฑ
            # pytgcalls ูุฏููุง ูุนุงูุฌุงุช ุฃุญุฏุงุซ ูุงูุชูุงุก ุงูุชุดุบูู
            
            # (ุงุฎุชูุงุฑู) ููููู ุญุฐู ุงูููู ุจุนุฏ ููุช ูุนูู ุฃู ุนูุฏ ุจุฏุก ุฃุบููุฉ ุฌุฏูุฏุฉ
            # ุฅุฐุง ูุงู ุงูููู ูุคูุชูุง ูู ููุชููุจ
            if not audio_info.get("is_local", False) and os.path.exists(file_path):
                 # ููููู ุชูููุฐ ูุฐุง ูู ูุนุงูุฌ ุฃุญุฏุงุซ ูุงูุชูุงุก ุงูุชุดุบูู ุฃู ุจุนุฏ ุงูุชุฃูุฏ ูู ุงูุชุดุบูู
                 # ุฃู ุจุนุฏ ุชุฎุทู ุงูุฃุบููุฉ
                pass # ูุง ูุญุฐู ููุง ูุชุฌูุจ ุงููุดุงููุ ูุญุฐู ุนูุฏ ุงูุชูุงุก ุงูุชุดุบูู ุงููุนูู

        except Exception as e:
            await app.send_message(chat_id, f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุดุบูู ุงูุตูุช ูู ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ: `{e}`")
            print(f"ุฎุทุฃ ูู play_next_in_queue: {e}")
            del active_chats[chat_id] # ุฅุฒุงูุฉ ูู ุงูุฏุฑุฏุดุงุช ุงููุดุทุฉ ุฅุฐุง ูุดู
            # ุญุงูู ุชุดุบูู ุงูุฃุบููุฉ ุงูุชุงููุฉ ุฅุฐุง ูุดูุช ูุฐู
            asyncio.create_task(play_next_in_queue(chat_id))
    else:
        if chat_id in active_chats:
            await pytgcalls.leave_group_call(chat_id)
            del active_chats[chat_id]
        await app.send_message(chat_id, "โ ุงูุชูุช ูุงุฆูุฉ ุงูุชุดุบูู. ุบุงุฏุฑุช ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ.")

# ูุนุงูุฌ ูุงูุชูุงุก ุชุดุบูู ุฃุบููุฉ ูู ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ
@pytgcalls.on_stream_end()
async def stream_end_handler(client, update):
    chat_id = update.chat_id
    if chat_id in active_chats:
        # ุญุฐู ุงูููู ุงููุคูุช ุฅุฐุง ูุงู ูู ููุชููุจ
        if not active_chats[chat_id].get("is_local", False) and os.path.exists(active_chats[chat_id]["file_path"]):
            os.remove(active_chats[chat_id]["file_path"])
            print(f"ุชู ุญุฐู ุงูููู ุงูุตูุชู ุงููุคูุช {active_chats[chat_id]['file_path']}")
        
        active_chats[chat_id]["playing"] = None
        # ุจุฏุก ุชุดุบูู ุงูุฃุบููุฉ ุงูุชุงููุฉ ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ
        asyncio.create_task(play_next_in_queue(chat_id))

# ุงูุฃูุงูุฑ ุงูุฃุฎุฑู ุณุชุญุชุงุฌ ุฅูู ุงูุชุนุฏูู ูุงุณุชุฏุนุงุก play_next_in_queue

@app.on_message(filters.command("start") & filters.private)
async def start_command(client: Client, message: Message):
    await message.reply_text(
        "๐ ูุฑุญุจูุง ุจู ูู ุจูุช ุชุดุบูู ุงูููุณููู ูู ุงูุฏุฑุฏุดุงุช ุงูุตูุชูุฉ! "
        "ุฃุฑุณู ูู ุฑุงุจุท ููุชููุจ ุฃู ุงุณู ุฃุบููุฉ ููู ุฃููู ุจุชุดุบูููุง (`/play`).\n"
        "ูุชุดุบูู ุฃุบููุฉ ูู ูุฌูุฏ ุงูููุณููู ุงููุญูู ุงูุฎุงุต ุจูุ ุงุณุชุฎุฏู `/local_play`.\n"
        "ูุนุฑุถ ุงูุฃุบุงูู ุงููุญููุฉ ุงููุชุงุญุฉ: `/list_local`\n"
        "ูุงุณุชุฎุฏุงูู ูู ูุฌููุนุฉ ุฃู ููุงุฉุ ุฃุถููู ููุณุคูู."
    )

@app.on_message(filters.command("play") & (filters.group | filters.channel))
async def play_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("ุงูุฑุฌุงุก ุชูุฏูู ุฑุงุจุท ููุชููุจ ุฃู ุงุณู ุฃุบููุฉ.\nูุซุงู: `/play Despacito` ุฃู `/play https://www.youtube.com/watch?v=kJQP7kiw5Fk`")
        return

    query = " ".join(message.command[1:])
    chat_id = message.chat.id

    await message.reply_text(f"โณ ุฌุงุฑู ุงูุจุญุซ ุนู: `{query}`...")

    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': os.path.join(DOWNLOAD_PATH, '%(title)s.%(ext)s'),
            'noplaylist': True,
            'quiet': True,
            'no_warnings': True,
        }

        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=False)
            if 'entries' in info:
                info = info['entries'][0]
            
            file_path = ydl.prepare_filename(info)
            ydl.download([query])

            audio_title = info.get('title', 'ุบูุฑ ูุนุฑูู')

            if chat_id not in queue:
                queue[chat_id] = []
            
            queue[chat_id].append({"file_path": file_path, "title": audio_title, "is_local": False})

            # ููุง ูุณุชุฏุนู play_next_in_queue ุจุฏูุงู ูู process_queue
            if chat_id not in active_chats or active_chats[chat_id].get("playing") is None:
                await play_next_in_queue(chat_id)
            else:
                await message.reply_text(f"โ ุชู ุฅุถุงูุฉ **{audio_title}** ุฅูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ.")

    except Exception as e:
        await message.reply_text(f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ ุฃู ุงูุชูุฒูู: `{e}`")
        print(f"ุฎุทุฃ ูู ุฃูุฑ /play: {e}")


@app.on_message(filters.command("local_play") & (filters.group | filters.channel))
async def local_play_command(client: Client, message: Message):
    if len(message.command) < 2:
        await message.reply_text("ุงูุฑุฌุงุก ุชูุฏูู ุฑูู ุงูุฃุบููุฉ ูู ูุงุฆูุฉ `/list_local` ุฃู ุงุณููุง ูุงููุงู.\nูุซุงู: `/local_play 1` ุฃู `/local_play My_Awesome_Song.mp3`")
        return

    query = " ".join(message.command[1:])
    chat_id = message.chat.id
    
    music_files = [f for f in os.listdir(LOCAL_MUSIC_PATH) if f.endswith(('.mp3', '.wav', '.ogg', '.flac', '.m4a'))]
    
    selected_file = None
    if query.isdigit():
        index = int(query) - 1
        if 0 <= index < len(music_files):
            selected_file = music_files[index]
        else:
            await message.reply_text("โ ุฑูู ุงูุฃุบููุฉ ุบูุฑ ุตุงูุญ. ุงุณุชุฎุฏู `/list_local` ููุนุฑูุฉ ุงูุฃุฑูุงู ุงูุตุญูุญุฉ.")
            return
    else:
        for file_name in music_files:
            if query.lower() in file_name.lower():
                selected_file = file_name
                break
        if not selected_file:
            await message.reply_text(f"โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุบููุฉ ุจุงุณู `{query}` ูู ุงููุฌูุฏ ุงููุญูู. ูุฑุฌู ุงูุชุฃูุฏ ูู ุงูุงุณู ุฃู ุงุณุชุฎุฏุงู `/list_local`.")
            return

    full_path = os.path.join(LOCAL_MUSIC_PATH, selected_file)

    if chat_id not in queue:
        queue[chat_id] = []
    
    queue[chat_id].append({"file_path": full_path, "title": selected_file, "is_local": True})

    # ููุง ูุณุชุฏุนู play_next_in_queue ุจุฏูุงู ูู process_queue
    if chat_id not in active_chats or active_chats[chat_id].get("playing") is None:
        await play_next_in_queue(chat_id)
    else:
        await message.reply_text(f"โ ุชู ุฅุถุงูุฉ **{selected_file}** ุฅูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ.")


@app.on_message(filters.command("skip") & (filters.group | filters.channel))
async def skip_command(client: Client, message: Message):
    chat_id = message.chat.id
    if queue.get(chat_id) and queue[chat_id]:
        await message.reply_text("โฉ ุชุฎุทู ุงูุฃุบููุฉ ุงูุญุงููุฉ...")
        # PyTgCalls ูุง ุชุณูุญ ุจุชุฎุทู ููุฑู ุฅูุง ุจุจุฏุก ุชุดุบูู ุฃุบููุฉ ุฌุฏูุฏุฉ.
        # ูุฐุงุ ุณูููู ุจุชุดุบูู ุงูุฃุบููุฉ ุงูุชุงููุฉ ูุจุงุดุฑุฉ
        asyncio.create_task(play_next_in_queue(chat_id))
    elif chat_id in active_chats and active_chats[chat_id].get("playing"):
        await message.reply_text("ูุง ุชูุฌุฏ ุฃุบุงูู ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑุ ุณุฃุบุงุฏุฑ ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ.")
        await pytgcalls.leave_group_call(chat_id)
        del active_chats[chat_id]
    else:
        await message.reply_text("ูุง ุชูุฌุฏ ุฃุบุงูู ูู ูุงุฆูุฉ ุงูุชุดุบูู ุญุงูููุง.")

@app.on_message(filters.command("stop") & (filters.group | filters.channel))
async def stop_command(client: Client, message: Message):
    chat_id = message.chat.id
    if chat_id in active_chats:
        queue[chat_id].clear() # ูุณุญ ูุงุฆูุฉ ุงูุงูุชุธุงุฑ
        await pytgcalls.leave_group_call(chat_id)
        del active_chats[chat_id]
        await message.reply_text("โน๏ธ ุชู ุฅููุงู ุงูุชุดุบูู ููุณุญ ูุงุฆูุฉ ุงูุงูุชุธุงุฑ. ุบุงุฏุฑุช ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ.")
    else:
        await message.reply_text("ูุง ููุฌุฏ ุดูุก ููุฏ ุงูุชุดุบูู ุญุงูููุง ูู ุงูุฏุฑุฏุดุฉ ุงูุตูุชูุฉ.")

# ... (ุจููุฉ ุงูุฃูุงูุฑ ูุซู list_local ู queue ูููู ุฃู ุชุจูู ููุง ูู ูุน ุชุนุฏููุงุช ุจุณูุทุฉ)
@app.on_message(filters.command("queue") & (filters.group | filters.channel))
async def show_queue_command(client: Client, message: Message):
    chat_id = message.chat.id
    current_playing = active_chats.get(chat_id, {}).get("playing")
    
    if queue.get(chat_id) and len(queue[chat_id]) > 0:
        msg = "๐ถ **ูุงุฆูุฉ ุงูุงูุชุธุงุฑ:**\n"
        if current_playing:
            msg += f"โถ๏ธ ููุฏ ุงูุชุดุบูู ุงูุขู: **{current_playing}**\n"
        
        for i, audio_info in enumerate(queue[chat_id]):
            msg += f"{i+1}. {audio_info['title']}\n"
        await message.reply_text(msg)
    else:
        if current_playing:
            await message.reply_text(f"๐ถ ููุฏ ุงูุชุดุบูู ุงูุขู: **{current_playing}**\nูุง ุชูุฌุฏ ุฃุบุงูู ุฃุฎุฑู ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ.")
        else:
            await message.reply_text("โ ูุงุฆูุฉ ุงูุชุดุบูู ูุงุฑุบุฉ.")

# ุงุจุฏุฃ ุงูุจูุช ู PyTgCalls
print("ุงูุจูุช ุฌุงูุฒ ููุนูู...")
pytgcalls.start()
app.run()
idle() # ููุญูุงุธ ุนูู ุงูุจูุช ูุนูู ุฅูู ุงูุฃุจุฏ
